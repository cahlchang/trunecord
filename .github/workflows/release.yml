name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-browser-app:
    name: Build Browser Application
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds (native compilation required)
          - os: macos-latest
            platform: darwin
            arch: amd64
            name: trunecord-darwin-amd64
            dmg_name: trunecord-amd64.dmg
          - os: macos-latest
            platform: darwin
            arch: arm64
            name: trunecord-darwin-arm64
            dmg_name: trunecord-arm64.dmg
            
          # Windows builds  
          - os: windows-latest
            platform: windows
            arch: amd64
            name: trunecord-windows-amd64
            
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            name: trunecord-linux-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Wails is no longer needed for browser app

      # Platform-specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libayatana-appindicator3-dev
          sudo apt-get install -y build-essential libopus-dev

      - name: Install macOS dependencies  
        if: runner.os == 'macOS'
        run: |
          brew install opus

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-opus
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gcc

      # Build the browser application
      - name: Build Browser App
        shell: bash
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          cd go-client
          mkdir -p build/bin
          if [ "${{ matrix.platform }}" = "windows" ]; then
            go build -o build/bin/trunecord.exe cmd/main.go
          else
            go build -o build/bin/trunecord cmd/main.go
          fi

      # Package for macOS (create DMG)
      - name: Create macOS DMG
        if: runner.os == 'macOS'
        run: |
          cd go-client
          mkdir -p dist
          
          # Create DMG with hdiutil
          DMG_TEMP="dist/dmg-temp"
          rm -rf "$DMG_TEMP"
          mkdir -p "$DMG_TEMP"
          
          # Copy binary to temp directory
          cp build/bin/trunecord "$DMG_TEMP/"
          
          # Create Applications symlink
          ln -s /Applications "$DMG_TEMP/Applications"
          
          # Create README
          cat > "$DMG_TEMP/README.txt" << 'EOF'
          trunecord Installation
          ======================
          
          1. Copy trunecord to the Applications folder
          2. Launch trunecord from Terminal or double-click
          3. The app will open in your browser
          
          Support: https://github.com/cahlchang/trunecord
          EOF
          
          # Create DMG
          hdiutil create -volname "trunecord" \
            -srcfolder "$DMG_TEMP" \
            -ov \
            -format UDZO \
            "dist/${{ matrix.dmg_name }}"
          
          # Clean up temp directory
          rm -rf "$DMG_TEMP"

      # Package for Windows (create ZIP)
      - name: Package Windows App
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd go-client
          New-Item -ItemType Directory -Force -Path dist
          Compress-Archive -Path "build\bin\trunecord.exe" -DestinationPath "dist\trunecord-windows-amd64.zip"

      # Package for Linux (tar.gz)
      - name: Package Linux App
        if: runner.os == 'Linux'
        run: |
          cd go-client
          mkdir -p dist
          tar -czf dist/trunecord-linux-amd64.tar.gz -C build/bin trunecord

      # Upload Release Assets
      - name: Upload macOS DMG
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./go-client/dist/${{ matrix.dmg_name }}
          asset_name: ${{ matrix.dmg_name }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload Windows ZIP
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./go-client/dist/trunecord-windows-amd64.zip
          asset_name: trunecord-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Linux Archive
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./go-client/dist/trunecord-linux-amd64.tar.gz
          asset_name: trunecord-linux-amd64.tar.gz
          asset_content_type: application/gzip

  build-extension:
    name: Build Chrome Extension
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Package Chrome Extension
        run: |
          cd extension
          chmod +x scripts/package.sh
          ./scripts/package.sh

      - name: Upload Chrome Extension
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/trunecord-extension.zip
          asset_name: trunecord-chrome-extension.zip
          asset_content_type: application/zip